version: '3.8'

services:
  orders-db:
    image: postgres
    container_name: orders-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    volumes:
      - ./volumes/database/orders/data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    restart: unless-stopped

  payments-db:
    image: postgres
    container_name: payments-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payments
    volumes:
      - ./volumes/database/payments/data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: pg-admin
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@mi.kram"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - ./volumes/pgadmin:/var/lib/pgadmin
    ports:
      - "5001:80"
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - ./volumes/zookeeper:/var/lib/zookeeper
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - "9092:9092"
    expose:
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT, LOCALHOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: CLIENT
      KAFKA_ADVERTISED_LISTENERS: CLIENT://kafka:29092, LOCALHOST://localhost:9092
      KAFKA_LISTENERS: CLIENT://0.0.0.0:29092, LOCALHOST://0.0.0.0:9092
    volumes:
      - ./volumes/kafka:/var/lib/kafka
    depends_on:
      zookeeper:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    restart: unless-stopped
  
  kafka-init:
    image: confluentinc/cp-kafka
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
        restart: true
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      echo 'Create a topic new-order...';
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic new-order --partitions 3 --replication-factor 1;
      echo 'Create a topic order-paid...';
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order-paid --partitions 3 --replication-factor 1;
      "

  kafka-ui:
    image: docker.redpanda.com/redpandadata/console
    container_name: kafka-ui
    ports:
      - "5002:8080"
    environment:
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
        restart: true
    restart: unless-stopped

  payments-service:
    build: ./PaymentsService
    container_name: payments-service
    environment:
      PaymentsService.DB_CONNECTION: "Host=payments-db;Port=5432;Database=payments;Username=postgres;Password=postgres"
      PaymentsService.KAFKA: "kafka:29092"
      PaymentsService.TOPIC_NEW_ORDER: "new-order"
      PaymentsService.TOPIC_PAID_ORDER: "order-paid"
    depends_on:
      payments-db:
        condition: service_healthy
        restart: true
      kafka-init:
        condition: service_completed_successfully
        restart: true
    restart: unless-stopped

  orders-service:
    build: ./OrdersService
    container_name: orders-service
    environment:
      OrdersService.DB_CONNECTION: "Host=orders-db;Port=5432;Database=orders;Username=postgres;Password=postgres"
      OrdersService.KAFKA: "kafka:29092"
      OrdersService.TOPIC_NEW_ORDER: "new-order"
      OrdersService.TOPIC_PAID_ORDER: "order-paid"
    depends_on:
      orders-db:
        condition: service_healthy
        restart: true
      kafka-init:
        condition: service_completed_successfully
        restart: true
    restart: unless-stopped

  notifier-service:
    build: ./OrderStatusChangeNotifier
    container_name: notifier-service
    depends_on:
      kafka-init:
        condition: service_completed_successfully
        restart: true
    environment:
      OrderStatusChangeNotifier.KAFKA: "kafka:29092"
      OrderStatusChangeNotifier.TOPIC_NEW_ORDER: "new-order"
      OrderStatusChangeNotifier.TOPIC_PAID_ORDER: "order-paid"
    restart: unless-stopped

  gateway-service:
    build: ./GatewayService
    container_name: gateway-service
    ports:
      - "8080:8080"
    depends_on:
      - orders-service
      - payments-service
    environment:
      GatewayService.ORDER_STATUS_NOTIFIER_SERVER: "http://notifier-service:8080"
      GatewayService.PAYMENTS_SERVER: "http://payments-service:8080"
      GatewayService.ORDERS_SERVER: "http://orders-service:8080"
    restart: unless-stopped

  web-client:
    build: ./WebUI
    container_name: web-client
    ports:
      - "5000:80"
    environment:
      WebUI_GATEWAY_SERVER: "http://localhost:8080"
    entrypoint: /bin/sh
    command: >
      -c "
      envsubst < /usr/share/nginx/html/env.template.js > /usr/share/nginx/html/env.js &&
      exec nginx -g 'daemon off;'
      "


